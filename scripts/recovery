#!/bin/bash

#set -x

# Runs a coordinator, 2 masters, and a 1 backup
# Client runs and reports its master down at the end of its run
# If everything works right the second master should recover the first

umask 0000

source ./scripts/common.bash

datetime=$(date +%Y%m%d%H%M%S)
outputdir="$(pwd)/recovery/$datetime"
mkdir -p $outputdir
(cd recovery; ln -fsT $datetime latest)

#proto=fast+udp
#proto=tcp
proto=infrc

host[0]=rc10
host[1]=rc11
host[2]=rc12
host[3]=rc13
host[4]=rc14
host[5]=rc17

C=$proto:host=${host[0]}ib,port=12246
commonopts="-l DEBUG --logModule transport=NOTICE -C $C"
#remoteprecmd="ulimit -c 100000000; export LD_LIBRARY_PATH=/usr/local/lib;"
remoteprecmd="export LD_LIBRARY_PATH=/usr/local/lib;"

xstart() {
    xterm -e ssh -t -t $1 "$remoteprecmd $(pwd)/$OBJDIR/$2 $commonopts 2>&1 | tee $outputdir/$3" &
    atexit "kill $! 2>/dev/null"
}

start() {
    ssh $1 "$remoteprecmd $(pwd)/$OBJDIR/$2 $commonopts > $outputdir/$3 2>&1"  &
    atexit "kill $! 2>/dev/null"
}

startfg() {
    ssh $1 "$remoteprecmd $(pwd)/$OBJDIR/$2 $commonopts 2>&1 | tee $outputdir/$3"
    atexit "kill $! 2>/dev/null"
}

ensure() {
    ssh ${host[0]} $remoteprecmd $(pwd)/$OBJDIR/ensureHosts -C $C -n $1 -l 1 || exit 1
}

suffix=.$$.log

start ${host[0]} coordinator coordinator$suffix

ensure 0

backupflags="-m"
#backupflags="-f /dev/sda2"
start ${host[0]} "backup $backupflags -L $proto:host=${host[0]}ib,port=12243" backup1$suffix
start ${host[1]} "backup $backupflags -L $proto:host=${host[1]}ib,port=12244" backup2$suffix
start ${host[2]} "backup $backupflags -L $proto:host=${host[2]}ib,port=12290" backup3$suffix
start ${host[3]} "backup $backupflags -L $proto:host=${host[3]}ib,port=12291" backup4$suffix
start ${host[4]} "backup $backupflags -L $proto:host=${host[4]}ib,port=12292" backup5$suffix
start ${host[5]} "backup $backupflags -L $proto:host=${host[5]}ib,port=12293" backup6$suffix

ensure 6

start ${host[0]} "server -m 2048 -r 1 -L $proto:host=${host[0]}ib,port=12242" oldMaster$suffix
ensure 7
start ${host[1]} "server -m 2048 -r 1 -L $proto:host=${host[1]}ib,port=12247" newMaster1$suffix

# add in third master and pass "-t 2 -k 2" to this script to recover 2 partitions
#start ${host[2]} "server -m 2048 -r 1 -L $proto:host=${host[2]}ib,port=12248" newMaster2$suffix

ensure 8

startfg ${host[0]} "client -d $*" client$suffix

#read

for h in ${host[@]}; do
    # sloppy version of cleaup in case ssh -t -t doesn't do the trick
    ssh $h "pkill backup; pkill server; pkill coordinator; pkill client"
done > /dev/null 2>&1

sort $outputdir/*.log > $outputdir/all.log

# Extract values and dump to stdout, useful when all processes are run in separate
# xterms, otherwise it's best to extract values directly from the leftover $outputdir/all.log
awk '
/Performing/ { count=$8; size=$11; }
/Recovery completed in/ { ns=$10; }
/Bytes written/ { if ($9 != 0) { written=$9; } }
/Bytes logged/ { if ($10 != 0) { logged=$10; } }
END { print count " " size " " written " " logged " " ns; }
' $outputdir/all.log
