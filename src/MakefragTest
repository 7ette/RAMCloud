OBJDIRS += tests

ifeq ($(INFINIBAND),yes)
INFINIBAND_SRCFILES := \
	   src/MockInfiniband.cc \
	   $(NULL)
else
INFINIBAND_SRCFILES :=
endif

TESTS_SRCFILES := \
		  src/BackupManagerTest.cc \
		  src/BackupServerTest.cc \
		  src/BackupStorageTest.cc \
		  src/BenchUtilTest.cc \
		  src/BindTransport.cc \
		  src/BoostIntrusiveTest.cc \
		  src/BufferTest.cc \
		  src/ClientExceptionTest.cc \
		  src/ClientTest.cc \
		  src/CommonTest.cc \
		  src/CoordinatorTest.cc \
		  src/Crc32CTest.cc \
		  src/DispatchTest.cc \
		  src/FailureDetectorTest.cc \
		  src/FastTransportTest.cc \
		  src/HashTableTest.cc \
		  src/InfAddressTest.cc \
		  src/InfRcTransportTest.cc \
		  src/InfUdDriverTest.cc \
		  src/IpAddressTest.cc \
		  src/LogTest.cc \
		  src/LogCleanerTest.cc \
		  src/LoggingTest.cc \
		  src/MasterTest.cc \
		  src/MetricsTest.cc \
		  src/MockDriver.cc \
		  src/MockTransport.cc \
		  src/ObjectFinderTest.cc \
		  src/TubTest.cc \
		  src/OptionParserTest.cc \
		  src/ProtoBufTest.cc \
		  src/Recovery.cc \
		  src/RecoverySegmentIteratorTest.cc \
		  src/RecoveryTest.cc \
		  src/SegmentTest.cc \
		  src/SegmentIteratorTest.cc \
		  src/ServerTest.cc \
		  src/ServiceLocatorTest.cc \
		  src/StatusTest.cc \
		  src/TabletProfilerTest.cc \
		  src/TcpTransportTest.cc \
		  src/TestRunner.cc \
		  src/TestUtil.cc \
		  src/TestUtilTest.cc \
		  src/TransportManagerTest.cc \
		  src/UdpDriverTest.cc \
		  src/WillTest.cc \
		  src/WindowTest.cc \
		  $(INFINIBAND_SRCFILES) \
		  $(OBJDIR)/ProtoBufTest.pb.cc

TESTS_OBJFILES := $(TESTS_SRCFILES)
TESTS_OBJFILES := $(patsubst src/%.cc, $(OBJDIR)/%.o, $(TESTS_OBJFILES))
TESTS_OBJFILES := $(patsubst $(OBJDIR)/%.cc, $(OBJDIR)/%.o, $(TESTS_OBJFILES))
TESTS_OBJFILES := $(sort \
               $(TESTS_OBJFILES) \
               $(SHARED_OBJFILES) \
               $(SERVER_OBJFILES) \
               $(COORDINATOR_OBJFILES) \
               $(CLIENT_OBJFILES) \
               $(BACKUP_OBJFILES))

# begin google test rules
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

GTEST_SRCS = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

$(OBJDIR)/gtest-all.o: $(GTEST_DIR)/src/gtest-all.cc $(GTEST_SRCS)
	$(CXX) -I$(GTEST_DIR) $(CXXFLAGS_BASE) -c -o $@ $<

$(OBJDIR)/gtest.a: $(OBJDIR)/gtest-all.o
	$(AR) rcs $@ $^
# end google test rules

TESTS_LIB := -lcppunit -ldl $(LIBS)

$(OBJDIR)/test: $(TESTS_OBJFILES) $(OBJDIR)/gtest.a
	@mkdir -p $(@D)
	$(CXX) $(TESTS_LIB) -o $@ $^

# TODO(ongaro) The unit tests don't actually call HashTableBenchmark, Echo,
# Telnet, or RecoverSegmentBenchmark. I just wanted to make sure it continues to build over time.
test: $(OBJDIR)/test $(OBJDIR)/HashTableBenchmark $(OBJDIR)/Echo $(OBJDIR)/Telnet $(OBJDIR)/Bench $(OBJDIR)/RecoverSegmentBenchmark $(OBJDIR)/TransportSmack $(OBJDIR)/WillBenchmark
	$(OBJDIR)/test

ftest: $(OBJDIR)/test
	scripts/forking_test_runner.py

$(OBJDIR)/HashTableBenchmark: $(OBJDIR)/HashTableBenchmark.o $(SHARED_OBJFILES) $(SERVER_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/Echo: $(OBJDIR)/Echo.o $(SHARED_OBJFILES) $(SERVER_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/Telnet: $(OBJDIR)/Telnet.o $(SHARED_OBJFILES) $(SERVER_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/RecoverSegmentBenchmark: $(OBJDIR)/RecoverSegmentBenchmark.o $(SHARED_OBJFILES) $(SERVER_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/Bench: $(OBJDIR)/Bench.o $(OBJDIR)/TestUtil.o $(OBJDIR)/libramcloud.a
	@mkdir -p $(@D)
	$(CXX) $(TESTS_LIB) -o $@ $^

$(OBJDIR)/TransportSmack: $(OBJDIR)/TransportSmack.o $(OBJDIR)/Server.o $(OBJDIR)/Metrics.o $(OBJDIR)/libramcloud.a
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/WillBenchmark: $(OBJDIR)/WillBenchmark.o $(SHARED_OBJFILES) $(SERVER_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/BackupStorageBenchmark: $(OBJDIR)/BackupStorageBenchmark.o $(SHARED_OBJFILES) $(BACKUP_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

$(OBJDIR)/HintServerDown: $(OBJDIR)/HintServerDown.o $(SHARED_OBJFILES) $(CLIENT_OBJFILES)
	@mkdir -p $(@D)
	$(CXX) $(LIBS) -o $@ $^

# Do not remove.
tests-clean:

.PHONY: test-smack
test-smack: client $(OBJDIR)/server
	scripts/smack

.PHONY: test-bench
test-bench: $(OBJDIR)/server $(OBJDIR)/Bench
	scripts/run-bench
